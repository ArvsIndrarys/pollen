#!/usr/bin/python
# nerd: Network Exchanged Randomness Daemon

from contextlib import closing
import hashlib
import multiprocessing
import signal
import socket
import sys
import time

PKG = "nerd"
UDP_IP = ""
UDP_PORT = 6373
MSG_SIZE = 4096
RND_DEVICE = "/dev/urandom"
EXIT_FLAG = 0
INTERVAL = 60


def nerd_server():
	"""Exchange randomness upon request."""
	sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	sock.bind((UDP_IP, UDP_PORT))
	print "Started NerdServer"
	# Listen and respond to incoming requests
	while EXIT_FLAG == 0:
		# Receive message
		data, addr = sock.recvfrom(MSG_SIZE)
		print "Received [%s] bytes from [%s], checksum [%s]" % (
				len(data), addr, hashlib.md5(data).hexdigest())
		# Add the incoming entropy to the pool
		with closing(open(RND_DEVICE, "w")) as f:
			f.write(data)
		# Reply with as much entropy as we recevied,
		# up to MSG_SIZE maximum
		with closing(open(RND_DEVICE, "r")) as f:
			response = f.read(len(data))
		print "Sending [%s] bytes to [%s], checksum [%s]" % (
				len(response), addr, hashlib.md5(response).hexdigest())
		sock.sendto(response, addr)


def nerd_client():
	"""Periodically initiate randomness exchange with peers."""
	sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	sock.bind(('', 0))
	sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
	print "Started NerdClient"
	while INTERVAL > 0 and EXIT_FLAG == 0:
		with closing(open(RND_DEVICE, "r")) as f:
			data = f.read(MSG_SIZE)
		sock.sendto(data, ('<broadcast>', UDP_PORT))
		print "Broadcasting [%s] bytes, checksum [%s]" % (
				len(data), hashlib.md5(data).hexdigest())
		time.sleep(INTERVAL)


def signal_handler(signal, frame):
	"""Set exit flag, and exit."""
	EXIT_FLAG = 1
	sys.exit(0)


# Handle signals appropriately
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGABRT, signal_handler)

# Create server and client processes
server = multiprocessing.Process(target=nerd_server, args=())
client = multiprocessing.Process(target=nerd_client, args=())
server.start()
client.start()
server.join()
client.join()
