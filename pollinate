#!/bin/sh
#
# pollinate: a Network Exchanged Entropy Daemon (client)
#
#  Copyright (C) 2012-2013 Dustin Kirkland <dustin.kirkland@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, version 3 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

PKG="pollinate"

error() {
	echo "ERROR: $@" 1>&2
	exit 1
}

log() {
	printf "$(date '+%b %e %T') $(hostname) ${PKG}[$$]: $@\n" 1>&2
}

random_hash() {
	# Read and print random bytes
	head -c "${BYTES}" "${DEVICE}" | sha512sum | awk '{print $1}'
}

salt() {
	# Append timestamp-based salt to input
	cat
	local i=0
	while [ ${i} -lt ${BYTES} ] ; do
		n=$(date +%N | sed "s/^0\+//")
		printf "%x" ${n}
		i=$((i+1))
	done
}

salt_hash_and_write() {
	# Salt input, whiten with a hash, and write to device
	[ "${DEBUG}" = "1" ] && cat "${1}" 1>&2
	local bytes=$(wc -c "${1}" | awk '{print $1}')
	cat "${1}" "${1}.out" "${1}.err" | salt | sha512sum > "${DEVICE}"
	rm -f "${1}"
	log "client salted and hashed response from [${2}]"
}

exchange() {
	local f1=$(mktemp -t "${PKG}.XXXXXXXXXXXX")
	local f2=$(mktemp -t "${PKG}.XXXXXXXXXXXX")
	printf "tag=" > "${f1}"
	cat "/var/lib/${PKG}/tag" 2>/dev/null >> "${f1}" || true
	# Create and enforce a challenge/response, to ensure personal communication
	local challenge=$(random_hash)
	local challenge_response=$(printf "${challenge}" | sha512sum | awk '{print $1}')
	printf "challenge=%s" "$challenge" > "${f2}"
	local cmd="curl ${CURL_OPTS} -o- -v --trace-time --connect-timeout 3 --max-time 3 --data @${f1} --data @${f2} ${1}"
	log "client sent hashed entropy to [${1}]"
	local f=$(mktemp -t "${PKG}.XXXXXXXXXXXX")
	($cmd >"${f}.out" 2>"${f}.err") || error "Network communication failed [$?]\n$(cat ${f})"
	[ "${challenge_response}" = $(head -n1 "${f}.out") ] || error "Server failed challenge/response [expected=${challenge_response}] != [got=$(head -n1 ${f}.out)]"
	log "client verified challenge/response with [${1}]"
	salt_hash_and_write "${f}" ${1}
}

# Source configuration
[ -r "/etc/default/${PKG}-client" ] && . "/etc/default/${PKG}-client"
[ -r "${HOME}/.${PKG}rc" ] && . "${HOME}/.${PKG}rc"
while [ ! -z "$1" ]; do
	case "${1}" in
		-b|--broadcast)
			BROADCAST="1"
			shift
		;;
		-c|--curl-opts)
			CURL_OPTS="$2"
			shift 2
		;;
		-d|--device)
			DEVICE="$2"
			shift 2
		;;
		--debug)
			DEBUG="1"
			shift
		;;
		--insecure)
			CURL_OPTS="${CURL_OPTS} --insecure"
			shift
		;;
		-s|--server)
			POOL="${POOL} $2"
			shift 2
		;;
		-w|--wget-opts)
			WGET_OPTS="$2"
			shift 2
		;;
		*)
			error "Unknown options [$1]"
		;;
	esac
done
[ -n "${DEVICE}" ] || DEVICE="/dev/urandom"
[ -n "${IPV6}" ] || IPV6=false
[ -n "${BYTES}" ] || BYTES=64
[ -n "${WAIT}" ] || WAIT="0.1"
if [ -z "${POOL}" ]; then
	error "No servers configured in pool"
fi
for i in ${POOL}; do
	exchange "${i}"
done
