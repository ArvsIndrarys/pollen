#!/bin/sh
#
# pollinate: an Entropy-as-a-Service client
#
#  Copyright (C) 2012-2013 Dustin Kirkland <dustin.kirkland@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, version 3 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

PKG="pollinate"
TMPDIR=$(mktemp -d -t "${PKG}.XXXXXXXXXXXX")
trap "rm -rf ${TMPDIR} 2>/dev/null || true" EXIT HUP INT QUIT TERM

error() {
	echo "ERROR: $@" 1>&2
	exit 1
}

log() {
	[ "${QUIET}" = "1" ] || printf "$(date '+%b %e %T') $(hostname) ${PKG}[$$]: $@\n" 1>&2
}

random_hash() {
	# Read and print urandom bytes
	head -c "${BYTES}" /dev/urandom | sha512sum | awk '{print $1}'
}

hash_and_write() {
	# Whiten input with a hash, and write to device
	local result=
	local hex=$(cat "${TMPDIR}/out" "${TMPDIR}/err" | sha512sum | awk '{print $1}')
	if [ "${BINARY}" = "1" ]; then
		result=$(/usr/bin/printf $(printf "${hex}" | sed -e "s/\(..\)/\\\x\1/g"))
	else
		result="${hex}"
	fi
	if [ "${DEVICE}" = "-" ]; then
		printf "%s\n" "${result}"
	else
		printf "%s" "${result}" > "${DEVICE}"
	fi
	log "client hashed response from [${1}]"
}

tagfile() {
	# Find the tagfile
	if [ -e "/var/lib/${PKG}/tag" ] || [ -w "/var/lib/${PKG}/" ]; then
		# Use the system wide one, if possible
		_RET="/var/lib/${PKG}/tag"
	else
		# Use a per-user one, for per-user runs
		_RET="${HOME}/.cache/${PKG}/tag"
	fi
	if [ ! -e "${_RET}" ]; then
		mkdir -p $(dirname "${_RET}")
		local tag=$(head -c 128 ${DEVICE} | sha512sum | awk '{print $1}')
		printf "tag=%s\n" "${tag}" > "${_RET}"
	fi
}

exchange() {
	local server="${1}"
	tagfile
	local f1="${_RET}"
	local f2="${TMPDIR}/challenge"
	case "${server}" in
		"http://"*|"https://"*)
			# looks good
			true
		;;
		*)
			# otherwise, default to https://
			server="https://${server}"
		;;
	esac
	# Create and enforce a challenge/response, to ensure personal communication
	local challenge=$(random_hash)
	local challenge_response=$(printf "${challenge}" | sha512sum | awk '{print $1}')
	printf "challenge=%s" "$challenge" > "${f2}"
	local cmd="curl ${CURL_OPTS} -o- -v --trace-time --connect-timeout ${WAIT} --max-time ${WAIT} --data @${f1} --data @${f2} ${server}"
	log "client sent challenge to [${1}]"
	local out="${TMPDIR}/out"
	local err="${TMPDIR}/err"
	$cmd >"${out}" 2>"${err}" || error "Network communication failed [$?]\n$(cat ${out} ${err})"
	[ "${challenge_response}" = $(head -n1 "${out}") ] || error "Server failed challenge/response [expected=${challenge_response}] != [got=$(head -n1 ${out})]"
	log "client verified challenge/response with [${server}]"
	hash_and_write "${server}"
}

# Source configuration
[ -r "/etc/default/pollinate" ] && . "/etc/default/pollinate"
while [ ! -z "$1" ]; do
	case "${1}" in
		-b|--binary)
			BINARY=1
			shift
		;;
		-c|--curl-opts)
			CURL_OPTS="${CURL_OPTS} $2"
			shift 2
		;;
		-d|--device)
			DEVICE="$2"
			shift 2
		;;
		-i|--insecure)
			CURL_OPTS="${CURL_OPTS} --insecure"
			shift
		;;
		-s|--server)
			POOL="${POOL} $2"
			shift 2
		;;
		-q|--quiet)
			QUIET=1
			shift
		;;
		-w|--wait)
			WAIT="$2"
			shift 2
		;;
		*)
			error "Unknown options [$1]"
		;;
	esac
done
[ -n "${DEVICE}" ] || DEVICE="/dev/urandom"
[ -n "${BYTES}" ] || BYTES=64
[ -n "${WAIT}" ] || WAIT="3"
if [ -z "${POOL}" ]; then
	error "No servers configured in pool"
fi
for i in ${POOL}; do
	exchange "${i}"
done
