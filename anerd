#!/bin/sh
#
# anerd: a Network Exchange Randomness Daemon client
#
#  Copyright (C) 2012-2013 Dustin Kirkland <dustin.kirkland@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, version 3 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

error() {
	echo "ERROR: $@" 1>&2
	exit 1
}

random_bytes() {
	# Read and print random bytes
	head -c "${BYTES}" "${DEVICE}"
}

salt() {
	# Append timestamp-based salt to input
	cat
	local i=0
	while [ ${i} -lt ${BYTES} ] ; do
		n=$(date +%N | sed "s/^0\+//")
		printf "%x" ${n}
		i=$((i+1))
	done
}

salt_hash_and_write() {
	# Salt input, whiten with a hash, and write to device
	[ "${DEBUG}" = "1" ] && cat "${1}" 1>&2
	local bytes=$(wc -c "${1}" | awk '{print $1}')
	cat "${1}" | salt | sha512sum > "${DEVICE}"
	rm -f "${1}"
	printf "$(date '+%b %e %T') $(hostname) anerd[$$]: ${PROTO} client hashed [${bytes} bytes] from [${2}]\n" 1>&2
}

udp_exchange_random_bytes() {
	local cmd=""
	case "${IPV6}" in
		true|TRUE|1)
			cmd="socat -v -t ${WAIT} UDP6-DATAGRAM:[${1}]:${2}"
		;;
		*)
			cmd="socat -v -t ${WAIT} - UDP-DATAGRAM:${1}:${2}"
		;;
	esac
	local f=$(mktemp -t "${PKG}.XXXXXXXXXXXX")
	printf "$(date '+%b %e %T') $(hostname) anerd[$$]: ${PROTO} client sent [${BYTES} bytes] to [${1}:${2}]\n" 1>&2
	(random_bytes | $cmd >"${f}" 2>&1) || error "UDP network communication failed [$?]"
	salt_hash_and_write "${f}" ${1}:${2}
}

tcp_exchange_random_bytes() {
	local url="${1}?r=$(cat /proc/sys/kernel/random/boot_id)__$(cat /proc/sys/kernel/random/uuid)"
	local cmd="curl ${CURL_OPTS} -o- -v --trace-time ${url}"
	printf "$(date '+%b %e %T') $(hostname) anerd[$$]: ${PROTO} client sent [16 bytes] to [${1}]\n" 1>&2
	local f=$(mktemp -t "${PKG}.XXXXXXXXXXXX")
	($cmd >"${f}" 2>&1) || error "TCP network communication failed [$?]\n$(cat ${f})"
	salt_hash_and_write "${f}" ${1}
}

broadcast() {
	local cmd="" dest=""
	case "${IPV6}" in
		true|TRUE|1)
			dest="ff02::1"
			cmd="socat -v -t ${WAIT} - UDP6-DATAGRAM:[${dest}]:${1}"
		;;
		*)
			dest="255.255.255.255"
			cmd="socat -v -t ${WAIT} - UDP-DATAGRAM:${dest}:${1},broadcast"
		;;
	esac
	printf "$(date '+%b %e %T') $(hostname) anerd[$$]: ${PROTO} client sent to [${dest}:${1}]\n" 1>&2
	local f=$(mktemp -t "${PKG}.XXXXXXXXXXXX")
	(random_bytes | $cmd >"${f}" 2>&1) || error "UDP network communication failed [$?]"
	salt_hash_and_write "${f}" ${dest}:${1}
}
# Source configuration
PKG="anerd"
[ -r "/etc/default/${PKG}-client" ] && . "/etc/default/${PKG}-client"
[ -r "${HOME}/.${PKG}rc" ] && . "${HOME}/.${PKG}rc"
while [ ! -z "$1" ]; do
	case "${1}" in
		-b|--broadcast)
			BROADCAST="1"
			shift
		;;
		-c|--curl-opts)
			CURL_OPTS="$2"
			shift 2
		;;
		-d|--device)
			DEVICE="$2"
			shift 2
		;;
		--debug)
			DEBUG="1"
			shift
		;;
		-s|--server)
			POOL="${POOL} $2"
			shift 2
		;;
		-t|--tcp)
			PROTO="tcp"
			shift
		;;
		-u|--udp)
			PROTO="udp"
			shift
		;;
		-w|--wget-opts)
			WGET_OPTS="$2"
			shift 2
		;;
		*)
			error "Unknown options [$1]"
		;;
	esac
done
[ -n "${DEVICE}" ] || DEVICE="/dev/urandom"
[ -n "${IPV6}" ] || IPV6=false
[ -n "${BYTES}" ] || BYTES=64
[ -n "${WAIT}" ] || WAIT="0.1"
[ -n "${PROTO}" ] || PROTO="tcp"
if [ "${PROTO}" = "udp" ]; then
	if [ -z "${POOL}" ]; then
		POOL="${POOL_UDP}"
		if [ -z "${POOL}" ]; then
			error "No servers configured in pool"
		fi
	fi
	# Loop over servers configured in the pool
	for i in ${POOL}; do
		# Get the hostname/ip
		h=${i%%:*}
		# Get the port, or set to default
		p=${i##*:}
		[ "${h}" = "${p}" ] && p="26373"
		[ -n "${h}" ] || continue
		udp_exchange_random_bytes "${h}" "${p}"
	done
	if [ "${BROADCAST}" = "1" ]; then
		# Now broadcast to the local network
		broadcast 26373 || true
	fi
elif [ "${PROTO}" = "tcp" ]; then
	if [ -z "${POOL}" ]; then
		POOL="${POOL_TCP}"
		if [ -z "${POOL}" ]; then
			error "No servers configured in pool"
		fi
	fi
	# Default is TCP
	for i in ${POOL}; do
		tcp_exchange_random_bytes "${i}"
	done
else
	error "Invalid protocol"
fi
