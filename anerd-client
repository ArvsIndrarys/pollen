#!/bin/bash
#
# anerd-client: Asynchronous Network Exchange Randomness Daemon Client
#
# Copyright 2012 Dustin Kirkland <kirkland@ubuntu.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#	http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Source configuration
PKG="anerd"
[ -r "/etc/${PKG}/pool" ] && . "/etc/${PKG}/pool"
[ -n "${IPV6}" ] || IPV6=false
[ -n "${POOL}" ] || exit 0
[ -n "${PORT}" ] || PORT=26373
[ -n "${DEVICE}" ] || DEVICE="/dev/urandom"
[ -n "${BYTES}" ] || BYTES=64
[ -n "${HASH}" ] || HASH="sha512sum"

salt() {
	local i=0
	while [ ${i} -lt ${BYTES} ] ; do
		n=$(date +%N | sed "s/^0\+//")
		printf "%x" ${n}
		i=$((i+1))
	done
}

hash_and_write() {
	# Whiten with a hash
	input=$(echo $serverInput | ${HASH})
	# Salt with the local nanoseconds, whiten with a hash, and write out
	salt=$(salt | ${HASH})
	printf "%s%s" "${salt%% *}" "${input%% *}" > "${DEVICE}"
}

broadcast4() {
	if type socat &>/dev/null; then
		serverInput=$(head -c "${BYTES}" "${DEVICE}" | socat -t 0.01 - UDP-DATAGRAM:255.255.255.255:${PORT},broadcast)
		hash_and_write
	else
		exit 1;
	fi
}

broadcast6() {
	if type socat &>/dev/null; then
		serverInput=$(head -c "${BYTES}" "${DEVICE}" | socat -t 0.01 - UDP6-DATAGRAM:[ff02::1]:${PORT})
		hash_and_write
	else
		exit 1;
	fi
}

# Loop over servers configured into the pool
for i in ${POOL}; do
	# Get the hostname/ip
	if [ $IPV6 == true ]; then
		h=${i}
		# Set port to default
		p="${PORT}"
	else
		h=${i%%:*}
		# Get the port, or set to default
		p=${i##*:}
		[ "${h}" = "${p}" ] && p="${PORT}"
	fi
	[ -n "${h}" ] || continue
	# Exchange entropy with the remote server
	if [ $IPV6  == true ]; then
		# For ipv6 transmission to each server socat is used, because bash does
		# not support ipv6 sockets
		if type socat &>/dev/null; then
			serverInput=$(head -c "${BYTES}" "${DEVICE}" | socat -t 0.01 - UDP6-DATAGRAM:[${h}]:${p})
			hash_and_write
		else
			exit 1;
		fi
	else
		exec 3<>"/dev/udp/${h}/${p}"
		head -c "${BYTES}" "${DEVICE}" >&3
		serverInput=$(head -c "${BYTES}" <&3)
		hash_and_write
		# Close Socket
		exec 3<&-
		exec 3>&-
	fi
done

# Use socat with appropriate args for ip version
if [ $IPV6 == true ]; then
	broadcast6
else
	broadcast4
fi
